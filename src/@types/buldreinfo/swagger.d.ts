/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export type paths = {
  "/v2/media": {
    /** Get Media by id */
    get: operations["getMedia"];
    /** Update media location */
    put: operations["putMedia"];
    /** Move media to trash */
    delete: operations["deleteMedia"];
  };
  "/v2/activity": {
    /** Get activity feed */
    get: operations["getActivity"];
  };
  "/v2/administrators": {
    /** Get administrators */
    get: operations["getAdministrators"];
  };
  "/v2/areas": {
    /** Get areas */
    get: operations["getAreas"];
    /** Update area (area must be provided as json on field "json" in multiPart) */
    post: operations["postAreas"];
  };
  "/v2/areas/pdf": {
    /** Get area PDF by id */
    get: operations["getAreasPdf"];
  };
  "/v2/webcams": {
    /** Get webcams */
    get: operations["getCameras"];
  };
  "/v2/dangerous": {
    /** Get boulders/routes marked as dangerous */
    get: operations["getDangerous"];
  };
  "/v2/elevation": {
    /** Get elevation by latitude and longitude */
    get: operations["getElevation"];
  };
  "/v2/frontpage": {
    /** Get frontpage */
    get: operations["getFrontpage"];
  };
  "/v2/grade/distribution": {
    /** Get grade distribution by Area Id or Sector Id */
    get: operations["getGradeDistribution"];
  };
  "/v2/graph": {
    /** Get graph (number of boulders/routes grouped by grade) */
    get: operations["getGraph"];
  };
  "/v2/images": {
    /** Get media by id */
    get: operations["getImages"];
  };
  "/v2/meta": {
    /** Get metadata */
    get: operations["getMeta"];
  };
  "/v2/permissions": {
    /** Get permissions */
    get: operations["getPermissions"];
    /** Update user privilegies */
    post: operations["postPermissions"];
  };
  "/v2/problem": {
    /** Get problem by id */
    get: operations["getProblem"];
  };
  "/v2/problem/pdf": {
    /** Get problem PDF by id */
    get: operations["getProblemPdf"];
  };
  "/v2/problems": {
    /** Get problems */
    get: operations["getProblems"];
    /** Update problem (problem must be provided as json on field "json" in multiPart) */
    post: operations["postProblems"];
  };
  "/v2/problems/xlsx": {
    /** Get problems as Excel (xlsx) */
    get: operations["getProblemsXlsx"];
  };
  "/v2/profile": {
    /** Get profile by id */
    get: operations["getProfile"];
  };
  "/v2/profile/statistics": {
    /** Get profile statistics by id */
    get: operations["getProfileStatistics"];
  };
  "/v2/profile/todo": {
    /** Get profile todo */
    get: operations["getProfileTodo"];
  };
  "/v2/profile/media": {
    /** Get profile media by id */
    get: operations["getProfilemedia"];
  };
  "/v2/robots.txt": {
    /** Get robots.txt */
    get: operations["getRobotsTxt"];
  };
  "/v2/sectors": {
    /** Get sector by id */
    get: operations["getSectors"];
    /** Update sector (sector smust be provided as json on field "json" in multiPart) */
    post: operations["postSectors"];
  };
  "/v2/sectors/pdf": {
    /** Get sector PDF by id */
    get: operations["getSectorsPdf"];
  };
  "/v2/sitemap.txt": {
    /** Get sitemap.txt */
    get: operations["getSitemapTxt"];
  };
  "/v2/ticks": {
    /** Get ticks (public ascents) */
    get: operations["getTicks"];
    /** Update tick (public ascent) */
    post: operations["postTicks"];
  };
  "/v2/todo": {
    /** Get todo on Area/Sector */
    get: operations["getTodo"];
    /** Update todo */
    post: operations["postTodo"];
  };
  "/v2/top": {
    /** Get top on Area/Sector */
    get: operations["getTop"];
  };
  "/v2/trash": {
    /** Get trash */
    get: operations["getTrash"];
    /** Move Area/Sector/Problem/Media to trash (only one of the arguments must be different from 0) */
    put: operations["putTrash"];
  };
  "/v2/problems/unmoderated": {
    /** Get problems requiring moderation */
    get: operations["getUnmoderatedProblems"];
  };
  "/v2/users/search": {
    /** Search for user */
    get: operations["getUsersSearch"];
  };
  "/v2/users/ticks": {
    /** Get ticks (public ascents) on logged in user as Excel file (xlsx) */
    get: operations["getUsersTicks"];
  };
  "/v2/without-js": {
    /** Get Frontpage without JavaScript (for embedding on e.g. Facebook) */
    get: operations["getWithoutJs"];
  };
  "/v2/without-js/area/{id}": {
    /** Get area by id without JavaScript (for embedding on e.g. Facebook) */
    get: operations["getWithoutJsArea"];
  };
  "/v2/without-js/problem/{id}": {
    /** Get problem by id without JavaScript (for embedding on e.g. Facebook) */
    get: operations["getWithoutJsProblem"];
  };
  "/v2/without-js/sector/{id}": {
    /** Get sector by id without JavaScript (for embedding on e.g. Facebook) */
    get: operations["getWithoutJsSector"];
  };
  "/v2/comments": {
    /** Update comment (comment must be provided as json on field "json" in multiPart) */
    post: operations["postComments"];
  };
  "/v2/media/svg": {
    /** Update Media SVG */
    post: operations["postMediaSvg"];
  };
  "/v2/problems/media": {
    /** Add media on problem (problem must be provided as json on field "json" in multiPart) */
    post: operations["postProblemsMedia"];
  };
  "/v2/problems/svg": {
    /** Update topo line on route/boulder (SVG on sector/problem-image) */
    post: operations["postProblemsSvg"];
  };
  "/v2/search": {
    /** Search for area/sector/problem/user */
    post: operations["postSearch"];
  };
  "/v2/user/regions": {
    /** Update visible regions */
    post: operations["postUserRegions"];
  };
  "/v2/media/info": {
    /** Update media info */
    put: operations["putMediaInfo"];
  };
  "/v2/media/jpeg/rotate": {
    /** Update media rotation (allowed for administrators + user who uploaded specific image) */
    put: operations["putMediaJpegRotate"];
  };
};

export type webhooks = Record<string, never>;

export type components = {
  schemas: {
    Activity: {
      activityIds?: number[];
      timeAgo?: string;
      /** Format: int32 */
      problemId?: number;
      problemLockedAdmin?: boolean;
      problemLockedSuperadmin?: boolean;
      problemName?: string;
      problemSubtype?: string;
      grade?: string;
      noPersonalGrade?: boolean;
      /** Format: int32 */
      problemRandomMediaId?: number;
      /** Format: int32 */
      problemRandomMediaCrc32?: number;
      media?: components["schemas"]["ActivityMedia"][];
      /** Format: int32 */
      stars?: number;
      repeat?: boolean;
      /** Format: int32 */
      id?: number;
      name?: string;
      picture?: string;
      description?: string;
      message?: string;
      users?: components["schemas"]["ActivityUser"][];
    };
    ActivityMedia: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      crc32?: number;
      movie?: boolean;
      embedUrl?: string;
    };
    ActivityUser: {
      /** Format: int32 */
      id?: number;
      name?: string;
      picture?: string;
    };
    Administrator: {
      /** Format: int32 */
      userId?: number;
      name?: string;
      picture?: string;
      lastLogin?: string;
    };
    Approach: {
      coordinates?: components["schemas"]["Coordinates"][];
      /** Format: double */
      calculatedDurationInMinutes?: number;
      /** Format: int64 */
      distance?: number;
      /** Format: int64 */
      elevationGain?: number;
      /** Format: int64 */
      elevationLoss?: number;
    };
    Area: {
      redirectUrl?: string;
      /** Format: int32 */
      regionId?: number;
      canonical?: string;
      /** Format: int32 */
      id?: number;
      trash?: boolean;
      lockedAdmin?: boolean;
      lockedSuperadmin?: boolean;
      forDevelopers?: boolean;
      accessInfo?: string;
      accessClosed?: string;
      noDogsAllowed?: boolean;
      /** Format: int32 */
      sunFromHour?: number;
      /** Format: int32 */
      sunToHour?: number;
      name?: string;
      comment?: string;
      coordinates?: components["schemas"]["Coordinates"];
      /** Format: int32 */
      numSectors?: number;
      /** Format: int32 */
      numProblems?: number;
      sectors?: components["schemas"]["AreaSector"][];
      sectorOrder?: components["schemas"]["AreaSectorOrder"][];
      media?: components["schemas"]["Media"][];
      triviaMedia?: components["schemas"]["Media"][];
      newMedia?: components["schemas"]["NewMedia"][];
      /** Format: int64 */
      hits?: number;
      typeNumTicked?: components["schemas"]["TypeNumTicked"][];
    };
    AreaSector: {
      areaName?: string;
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      sorting?: number;
      lockedAdmin?: boolean;
      lockedSuperadmin?: boolean;
      name?: string;
      comment?: string;
      accessInfo?: string;
      accessClosed?: string;
      parking?: components["schemas"]["Coordinates"];
      outline?: components["schemas"]["Coordinates"][];
      wallDirectionCalculated?: components["schemas"]["CompassDirection"];
      wallDirectionManual?: components["schemas"]["CompassDirection"];
      approach?: components["schemas"]["Approach"];
      /** Format: int32 */
      randomMediaId?: number;
      /** Format: int32 */
      randomMediaCrc32?: number;
      problems?: components["schemas"]["SectorProblem"][];
      typeNumTicked?: components["schemas"]["TypeNumTicked"][];
      /** Format: int32 */
      numProblems?: number;
    };
    AreaSectorOrder: {
      /** Format: int32 */
      id?: number;
      name?: string;
      /** Format: int32 */
      sorting?: number;
    };
    CompassDirection: {
      /** Format: int32 */
      id?: number;
      direction?: string;
    };
    Coordinates: {
      /** Format: int32 */
      id?: number;
      /** Format: double */
      latitude?: number;
      /** Format: double */
      longitude?: number;
      /** Format: double */
      elevation?: number;
      elevationSource?: string;
      /** Format: double */
      distance?: number;
    };
    Media: {
      /** Format: int32 */
      id?: number;
      uploadedByMe?: boolean;
      /** Format: int32 */
      crc32?: number;
      /** Format: int32 */
      pitch?: number;
      trivia?: boolean;
      /** Format: int32 */
      width?: number;
      /** Format: int32 */
      height?: number;
      /** Format: int32 */
      idType?: number;
      t?: string;
      mediaSvgs?: components["schemas"]["MediaSvgElement"][];
      /** Format: int32 */
      svgProblemId?: number;
      svgs?: components["schemas"]["Svg"][];
      mediaMetadata?: components["schemas"]["MediaMetadata"];
      embedUrl?: string;
      inherited?: boolean;
      /** Format: int32 */
      enableMoveToIdSector?: number;
      /** Format: int32 */
      enableMoveToIdProblem?: number;
    };
    MediaMetadata: {
      dateCreated?: string;
      dateTaken?: string;
      capturer?: string;
      tagged?: string;
      description?: string;
      location?: string;
      alt?: string;
    };
    MediaSvgElement: {
      /** @enum {string} */
      t?: "PATH" | "RAPPEL_BOLTED" | "RAPPEL_NOT_BOLTED";
      /** Format: int32 */
      id?: number;
      path?: string;
      /** Format: int32 */
      rappelX?: number;
      /** Format: int32 */
      rappelY?: number;
    };
    NewMedia: {
      name?: string;
      photographer?: string;
      inPhoto?: string;
      /** Format: int32 */
      pitch?: number;
      trivia?: boolean;
      description?: string;
      embedVideoUrl?: string;
      embedThumbnailUrl?: string;
      /** Format: int64 */
      embedMilliseconds?: number;
    };
    SectorProblem: {
      /** Format: int32 */
      id?: number;
      broken?: string;
      lockedAdmin?: boolean;
      lockedSuperadmin?: boolean;
      moderated?: boolean;
      /** Format: int32 */
      nr?: number;
      name?: string;
      rock?: string;
      comment?: string;
      /** Format: int32 */
      gradeNumber?: number;
      grade?: string;
      fa?: string;
      /** Format: int32 */
      numPitches?: number;
      hasImages?: boolean;
      hasMovies?: boolean;
      hasTopo?: boolean;
      coordinates?: components["schemas"]["Coordinates"];
      /** Format: int32 */
      numTicks?: number;
      /** Format: double */
      stars?: number;
      ticked?: boolean;
      todo?: boolean;
      t?: components["schemas"]["Type"];
      danger?: boolean;
    };
    Svg: {
      delete?: boolean;
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      problemId?: number;
      problemName?: string;
      problemGrade?: string;
      /** Format: int32 */
      problemGradeGroup?: number;
      problemSubtype?: string;
      /** Format: int32 */
      nr?: number;
      path?: string;
      hasAnchor?: boolean;
      texts?: string;
      anchors?: string;
      primary?: boolean;
      ticked?: boolean;
      todo?: boolean;
      dangerous?: boolean;
    };
    Type: {
      /** Format: int32 */
      id?: number;
      type?: string;
      subType?: string;
    };
    TypeNumTicked: {
      type?: string;
      /** Format: int32 */
      num?: number;
      /** Format: int32 */
      ticked?: number;
    };
    Webcam: {
      id?: string;
      lastUpdated?: string;
      name?: string;
      urlStillImage?: string;
      urlYr?: string;
      urlOther?: string;
      /** Format: double */
      lat?: number;
      /** Format: double */
      lng?: number;
    };
    Dangerous: {
      /** Format: int32 */
      id?: number;
      url?: string;
      name?: string;
      lockedAdmin?: boolean;
      lockedSuperadmin?: boolean;
      /** Format: int32 */
      sunFromHour?: number;
      /** Format: int32 */
      sunToHour?: number;
      sectors?: components["schemas"]["DangerousSector"][];
    };
    DangerousProblem: {
      /** Format: int32 */
      id?: number;
      url?: string;
      broken?: string;
      lockedAdmin?: boolean;
      lockedSuperadmin?: boolean;
      /** Format: int32 */
      nr?: number;
      name?: string;
      grade?: string;
      postBy?: string;
      postWhen?: string;
      postTxt?: string;
    };
    DangerousSector: {
      /** Format: int32 */
      id?: number;
      url?: string;
      name?: string;
      wallDirectionCalculated?: components["schemas"]["CompassDirection"];
      wallDirectionManual?: components["schemas"]["CompassDirection"];
      lockedAdmin?: boolean;
      lockedSuperadmin?: boolean;
      problems?: components["schemas"]["DangerousProblem"][];
    };
    Frontpage: {
      /** Format: int32 */
      numProblems?: number;
      /** Format: int32 */
      numProblemsWithCoordinates?: number;
      /** Format: int32 */
      numProblemsWithTopo?: number;
      /** Format: int32 */
      numTicks?: number;
      /** Format: int32 */
      numImages?: number;
      /** Format: int32 */
      numMovies?: number;
      randomMedia?: components["schemas"]["FrontpageRandomMedia"];
    };
    FrontpageRandomMedia: {
      /** Format: int32 */
      idMedia?: number;
      /** Format: int32 */
      crc32?: number;
      /** Format: int32 */
      width?: number;
      /** Format: int32 */
      height?: number;
      /** Format: int32 */
      idArea?: number;
      area?: string;
      /** Format: int32 */
      idSector?: number;
      sector?: string;
      /** Format: int32 */
      idProblem?: number;
      problem?: string;
      grade?: string;
      photographer?: components["schemas"]["User"];
      tagged?: components["schemas"]["User"][];
    };
    User: {
      /** Format: int32 */
      id?: number;
      name?: string;
    };
    GradeDistribution: {
      grade?: string;
      /** Format: int32 */
      num?: number;
      /** Format: int32 */
      prim?: number;
      /** Format: int32 */
      sec?: number;
      rows?: components["schemas"]["GradeDistributionRow"][];
    };
    GradeDistributionRow: {
      name?: string;
      /** Format: int32 */
      numBoulder?: number;
      /** Format: int32 */
      numSport?: number;
      /** Format: int32 */
      numTrad?: number;
      /** Format: int32 */
      numMixed?: number;
      /** Format: int32 */
      numTopRope?: number;
      /** Format: int32 */
      numAid?: number;
      /** Format: int32 */
      numAidTrad?: number;
      /** Format: int32 */
      numIce?: number;
    };
    Grade: {
      /** Format: int32 */
      id?: number;
      grade?: string;
    };
    LatLng: {
      /** Format: double */
      lat?: number;
      /** Format: double */
      lng?: number;
    };
    Meta: {
      title?: string;
      grades?: components["schemas"]["Grade"][];
      /** Format: int32 */
      defaultZoom?: number;
      defaultCenter?: components["schemas"]["LatLng"];
      url?: string;
      types?: components["schemas"]["Type"][];
      sites?: components["schemas"]["Site"][];
      compassDirections?: components["schemas"]["CompassDirection"][];
      bouldering?: boolean;
      climbing?: boolean;
      authenticated?: boolean;
      ice?: boolean;
      superAdmin?: boolean;
      admin?: boolean;
    };
    Site: {
      group?: string;
      name?: string;
      url?: string;
      outline?: components["schemas"]["Coordinates"][];
      active?: boolean;
    };
    PermissionUser: {
      /** Format: int32 */
      userId?: number;
      name?: string;
      picture?: string;
      lastLogin?: string;
      adminRead?: boolean;
      adminWrite?: boolean;
      superadminRead?: boolean;
      superadminWrite?: boolean;
      readOnly?: boolean;
    };
    FaAid: {
      /** Format: int32 */
      problemId?: number;
      date?: string;
      dateHr?: string;
      description?: string;
      users?: components["schemas"]["FaUser"][];
    };
    FaUser: {
      /** Format: int32 */
      id?: number;
      name?: string;
      picture?: string;
    };
    Problem: {
      redirectUrl?: string;
      /** Format: int32 */
      areaId?: number;
      areaLockedAdmin?: boolean;
      areaLockedSuperadmin?: boolean;
      areaName?: string;
      areaAccessInfo?: string;
      areaAccessClosed?: string;
      areaNoDogsAllowed?: boolean;
      /** Format: int32 */
      areaSunFromHour?: number;
      /** Format: int32 */
      areaSunToHour?: number;
      /** Format: int32 */
      sectorId?: number;
      sectorLockedAdmin?: boolean;
      sectorLockedSuperadmin?: boolean;
      sectorName?: string;
      sectorAccessInfo?: string;
      sectorAccessClosed?: string;
      sectorParking?: components["schemas"]["Coordinates"];
      sectorOutline?: components["schemas"]["Coordinates"][];
      sectorWallDirectionCalculated?: components["schemas"]["CompassDirection"];
      sectorWallDirectionManual?: components["schemas"]["CompassDirection"];
      sectorApproach?: components["schemas"]["Approach"];
      neighbourPrev?: components["schemas"]["SectorProblem"];
      neighbourNext?: components["schemas"]["SectorProblem"];
      canonical?: string;
      /** Format: int32 */
      id?: number;
      broken?: string;
      trash?: boolean;
      lockedAdmin?: boolean;
      lockedSuperadmin?: boolean;
      moderated?: boolean;
      /** Format: int32 */
      nr?: number;
      name?: string;
      rock?: string;
      comment?: string;
      grade?: string;
      originalGrade?: string;
      faDate?: string;
      faDateHr?: string;
      fa?: components["schemas"]["FaUser"][];
      coordinates?: components["schemas"]["Coordinates"];
      media?: components["schemas"]["Media"][];
      /** Format: int32 */
      numTicks?: number;
      /** Format: double */
      stars?: number;
      ticked?: boolean;
      ticks?: components["schemas"]["ProblemTick"][];
      todos?: components["schemas"]["ProblemTodo"][];
      comments?: components["schemas"]["ProblemComment"][];
      newMedia?: components["schemas"]["NewMedia"][];
      t?: components["schemas"]["Type"];
      sections?: components["schemas"]["ProblemSection"][];
      todo?: boolean;
      /** Format: int64 */
      hits?: number;
      faAid?: components["schemas"]["FaAid"];
      trivia?: string;
      triviaMedia?: components["schemas"]["Media"][];
      startingAltitude?: string;
      aspect?: string;
      routeLength?: string;
      descent?: string;
    };
    ProblemComment: {
      /** Format: int32 */
      id?: number;
      date?: string;
      /** Format: int32 */
      idUser?: number;
      picture?: string;
      name?: string;
      message?: string;
      danger?: boolean;
      resolved?: boolean;
      media?: components["schemas"]["Media"][];
      editable?: boolean;
    };
    ProblemSection: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      nr?: number;
      description?: string;
      grade?: string;
      media?: components["schemas"]["Media"][];
    };
    ProblemTick: {
      repeats?: components["schemas"]["TickRepeat"][];
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      idUser?: number;
      picture?: string;
      date?: string;
      name?: string;
      suggestedGrade?: string;
      noPersonalGrade?: boolean;
      comment?: string;
      /** Format: double */
      stars?: number;
      writable?: boolean;
    };
    ProblemTodo: {
      /** Format: int32 */
      idUser?: number;
      picture?: string;
      name?: string;
    };
    TickRepeat: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      tickId?: number;
      comment?: string;
      date?: string;
    };
    ProblemArea: {
      /** Format: int32 */
      id?: number;
      url?: string;
      name?: string;
      coordinates?: components["schemas"]["Coordinates"];
      lockedAdmin?: boolean;
      lockedSuperadmin?: boolean;
      /** Format: int32 */
      sunFromHour?: number;
      /** Format: int32 */
      sunToHour?: number;
      sectors?: components["schemas"]["ProblemAreaSector"][];
    };
    ProblemAreaProblem: {
      /** Format: int32 */
      id?: number;
      url?: string;
      broken?: string;
      lockedAdmin?: boolean;
      lockedSuperadmin?: boolean;
      /** Format: int32 */
      nr?: number;
      name?: string;
      description?: string;
      coordinates?: components["schemas"]["Coordinates"];
      grade?: string;
      fa?: string;
      /** Format: int32 */
      numTicks?: number;
      /** Format: double */
      stars?: number;
      ticked?: boolean;
      t?: components["schemas"]["Type"];
      /** Format: int32 */
      numPitches?: number;
    };
    ProblemAreaSector: {
      /** Format: int32 */
      id?: number;
      url?: string;
      name?: string;
      /** Format: int32 */
      sorting?: number;
      parking?: components["schemas"]["Coordinates"];
      outline?: components["schemas"]["Coordinates"][];
      wallDirectionCalculated?: components["schemas"]["CompassDirection"];
      wallDirectionManual?: components["schemas"]["CompassDirection"];
      lockedAdmin?: boolean;
      lockedSuperadmin?: boolean;
      problems?: components["schemas"]["ProblemAreaProblem"][];
    };
    Profile: {
      /** Format: int32 */
      id?: number;
      picture?: string;
      firstname?: string;
      lastname?: string;
      userRegions?: components["schemas"]["UserRegion"][];
    };
    UserRegion: {
      /** Format: int32 */
      id?: number;
      name?: string;
      role?: string;
      enabled?: boolean;
      readOnly?: boolean;
    };
    ProfileStatistics: {
      /** Format: int32 */
      numImagesCreated?: number;
      /** Format: int32 */
      numVideosCreated?: number;
      /** Format: int32 */
      numImageTags?: number;
      /** Format: int32 */
      numVideoTags?: number;
      ticks?: components["schemas"]["ProfileStatisticsTick"][];
    };
    ProfileStatisticsTick: {
      areaName?: string;
      areaLockedAdmin?: boolean;
      areaLockedSuperadmin?: boolean;
      sectorName?: string;
      sectorLockedAdmin?: boolean;
      sectorLockedSuperadmin?: boolean;
      /** Format: int32 */
      num?: number;
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      idTickRepeat?: number;
      subType?: string;
      /** Format: int32 */
      numPitches?: number;
      /** Format: int32 */
      idProblem?: number;
      lockedAdmin?: boolean;
      lockedSuperadmin?: boolean;
      name?: string;
      comment?: string;
      date?: string;
      dateHr?: string;
      /** Format: double */
      stars?: number;
      fa?: boolean;
      grade?: string;
      /** Format: int32 */
      gradeNumber?: number;
      noPersonalGrade?: boolean;
      coordinates?: components["schemas"]["Coordinates"];
    };
    ProfileTodo: {
      areas?: components["schemas"]["ProfileTodoArea"][];
    };
    ProfileTodoArea: {
      /** Format: int32 */
      id?: number;
      url?: string;
      name?: string;
      lockedAdmin?: boolean;
      lockedSuperadmin?: boolean;
      sectors?: components["schemas"]["ProfileTodoSector"][];
    };
    ProfileTodoPartner: {
      /** Format: int32 */
      id?: number;
      name?: string;
    };
    ProfileTodoProblem: {
      /** Format: int32 */
      todoId?: number;
      /** Format: int32 */
      id?: number;
      url?: string;
      lockedAdmin?: boolean;
      lockedSuperadmin?: boolean;
      /** Format: int32 */
      nr?: number;
      name?: string;
      grade?: string;
      coordinates?: components["schemas"]["Coordinates"];
      partners?: components["schemas"]["ProfileTodoPartner"][];
    };
    ProfileTodoSector: {
      /** Format: int32 */
      id?: number;
      url?: string;
      name?: string;
      lockedAdmin?: boolean;
      lockedSuperadmin?: boolean;
      problems?: components["schemas"]["ProfileTodoProblem"][];
    };
    ProfileMedia: {
      /** Format: int32 */
      id?: number;
      uploadedByMe?: boolean;
      /** Format: int32 */
      crc32?: number;
      /** Format: int32 */
      pitch?: number;
      trivia?: boolean;
      /** Format: int32 */
      width?: number;
      /** Format: int32 */
      height?: number;
      /** Format: int32 */
      idType?: number;
      t?: string;
      mediaSvgs?: components["schemas"]["MediaSvgElement"][];
      /** Format: int32 */
      svgProblemId?: number;
      svgs?: components["schemas"]["Svg"][];
      mediaMetadata?: components["schemas"]["MediaMetadata"];
      embedUrl?: string;
      inherited?: boolean;
      /** Format: int32 */
      enableMoveToIdSector?: number;
      /** Format: int32 */
      enableMoveToIdProblem?: number;
    };
    Sector: {
      redirectUrl?: string;
      orderByGrade?: boolean;
      /** Format: int32 */
      areaId?: number;
      areaLockedAdmin?: boolean;
      areaLockedSuperadmin?: boolean;
      areaAccessInfo?: string;
      areaAccessClosed?: string;
      areaNoDogsAllowed?: boolean;
      /** Format: int32 */
      areaSunFromHour?: number;
      /** Format: int32 */
      areaSunToHour?: number;
      areaName?: string;
      canonical?: string;
      /** Format: int32 */
      id?: number;
      trash?: boolean;
      lockedAdmin?: boolean;
      lockedSuperadmin?: boolean;
      name?: string;
      comment?: string;
      accessInfo?: string;
      accessClosed?: string;
      parking?: components["schemas"]["Coordinates"];
      outline?: components["schemas"]["Coordinates"][];
      wallDirectionCalculated?: components["schemas"]["CompassDirection"];
      wallDirectionManual?: components["schemas"]["CompassDirection"];
      approach?: components["schemas"]["Approach"];
      media?: components["schemas"]["Media"][];
      triviaMedia?: components["schemas"]["Media"][];
      sectors?: components["schemas"]["SectorJump"][];
      problems?: components["schemas"]["SectorProblem"][];
      problemOrder?: components["schemas"]["SectorProblemOrder"][];
      newMedia?: components["schemas"]["NewMedia"][];
      /** Format: int64 */
      hits?: number;
      siblings?: components["schemas"]["SectorJump"][];
    };
    SectorJump: {
      /** Format: int32 */
      id?: number;
      lockedAdmin?: boolean;
      lockedSuperadmin?: boolean;
      name?: string;
      /** Format: int32 */
      sorting?: number;
    };
    SectorProblemOrder: {
      /** Format: int32 */
      id?: number;
      name?: string;
      /** Format: int32 */
      nr?: number;
    };
    PublicAscent: {
      areaName?: string;
      areaLockedAdmin?: boolean;
      areaLockedSuperadmin?: boolean;
      sectorName?: string;
      sectorLockedAdmin?: boolean;
      sectorLockedSuperadmin?: boolean;
      /** Format: int32 */
      problemId?: number;
      problemGrade?: string;
      problemName?: string;
      problemLockedAdmin?: boolean;
      problemLockedSuperadmin?: boolean;
      date?: string;
      name?: string;
    };
    Ticks: {
      ticks?: components["schemas"]["PublicAscent"][];
      /** Format: int32 */
      currPage?: number;
      /** Format: int32 */
      numPages?: number;
    };
    Todo: {
      sectors?: components["schemas"]["TodoSector"][];
    };
    TodoPartner: {
      /** Format: int32 */
      id?: number;
      name?: string;
    };
    TodoProblem: {
      /** Format: int32 */
      id?: number;
      lockedAdmin?: boolean;
      lockedSuperadmin?: boolean;
      /** Format: int32 */
      nr?: number;
      name?: string;
      grade?: string;
      partners?: components["schemas"]["TodoPartner"][];
    };
    TodoSector: {
      /** Format: int32 */
      id?: number;
      name?: string;
      lockedAdmin?: boolean;
      lockedSuperadmin?: boolean;
      problems?: components["schemas"]["TodoProblem"][];
    };
    Top: {
      /** Format: int32 */
      rank?: number;
      /** Format: int32 */
      userId?: number;
      name?: string;
      picture?: string;
      /** Format: double */
      percentage?: number;
      mine?: boolean;
    };
    Trash: {
      /** Format: int32 */
      idArea?: number;
      /** Format: int32 */
      idSector?: number;
      /** Format: int32 */
      idProblem?: number;
      /** Format: int32 */
      idMedia?: number;
      name?: string;
      when?: string;
      by?: string;
    };
    UserSearch: {
      /** Format: int32 */
      id?: number;
      name?: string;
    };
    Redirect: {
      /** Format: int32 */
      idArea?: number;
      /** Format: int32 */
      idSector?: number;
      redirectUrl?: string;
      destination?: string;
    };
    BodyPart: {
      contentDisposition?: components["schemas"]["ContentDisposition"];
      entity?: Record<string, never>;
      headers?: {
        empty?: boolean;
        [key: string]: string[] | undefined;
      };
      mediaType?: components["schemas"]["MediaType"];
      messageBodyWorkers?: components["schemas"]["MessageBodyWorkers"];
      parent?: components["schemas"]["MultiPart"];
      providers?: components["schemas"]["Providers"];
      parameterizedHeaders?: {
        empty?: boolean;
        [key: string]: components["schemas"]["ParameterizedHeader"][] | undefined;
      };
    };
    ContentDisposition: {
      type?: string;
      parameters?: {
        [key: string]: string;
      };
      fileName?: string;
      /** Format: date-time */
      creationDate?: string;
      /** Format: date-time */
      modificationDate?: string;
      /** Format: date-time */
      readDate?: string;
      /** Format: int64 */
      size?: number;
    };
    FormDataBodyPart: {
      contentDisposition?: components["schemas"]["ContentDisposition"];
      entity?: Record<string, never>;
      headers?: {
        empty?: boolean;
        [key: string]: string[] | undefined;
      };
      mediaType?: components["schemas"]["MediaType"];
      messageBodyWorkers?: components["schemas"]["MessageBodyWorkers"];
      parent?: components["schemas"]["MultiPart"];
      providers?: components["schemas"]["Providers"];
      name?: string;
      value?: string;
      content?: Record<string, never>;
      fileName?: string;
      formDataContentDisposition?: components["schemas"]["FormDataContentDisposition"];
      simple?: boolean;
      parameterizedHeaders?: {
        empty?: boolean;
        [key: string]: components["schemas"]["ParameterizedHeader"][] | undefined;
      };
    };
    FormDataContentDisposition: {
      type?: string;
      parameters?: {
        [key: string]: string;
      };
      fileName?: string;
      /** Format: date-time */
      creationDate?: string;
      /** Format: date-time */
      modificationDate?: string;
      /** Format: date-time */
      readDate?: string;
      /** Format: int64 */
      size?: number;
      name?: string;
    };
    FormDataMultiPart: {
      contentDisposition?: components["schemas"]["ContentDisposition"];
      entity?: Record<string, never>;
      headers?: {
        empty?: boolean;
        [key: string]: string[] | undefined;
      };
      mediaType?: components["schemas"]["MediaType"];
      messageBodyWorkers?: components["schemas"]["MessageBodyWorkers"];
      parent?: components["schemas"]["MultiPart"];
      providers?: components["schemas"]["Providers"];
      bodyParts?: components["schemas"]["BodyPart"][];
      fields?: {
        [key: string]: components["schemas"]["FormDataBodyPart"][];
      };
      parameterizedHeaders?: {
        empty?: boolean;
        [key: string]: components["schemas"]["ParameterizedHeader"][] | undefined;
      };
    };
    MediaType: {
      type?: string;
      subtype?: string;
      parameters?: {
        [key: string]: string;
      };
      wildcardSubtype?: boolean;
      wildcardType?: boolean;
    };
    MessageBodyWorkers: Record<string, never>;
    MultiPart: {
      contentDisposition?: components["schemas"]["ContentDisposition"];
      entity?: Record<string, never>;
      headers?: {
        empty?: boolean;
        [key: string]: string[] | undefined;
      };
      mediaType?: components["schemas"]["MediaType"];
      messageBodyWorkers?: components["schemas"]["MessageBodyWorkers"];
      parent?: components["schemas"]["MultiPart"];
      providers?: components["schemas"]["Providers"];
      bodyParts?: components["schemas"]["BodyPart"][];
      parameterizedHeaders?: {
        empty?: boolean;
        [key: string]: components["schemas"]["ParameterizedHeader"][] | undefined;
      };
    };
    MultivaluedMapStringParameterizedHeader: {
      empty?: boolean;
      [key: string]: components["schemas"]["ParameterizedHeader"][] | undefined;
    };
    MultivaluedMapStringString: {
      empty?: boolean;
      [key: string]: string[] | undefined;
    };
    ParameterizedHeader: {
      value?: string;
      parameters?: {
        [key: string]: string;
      };
    };
    Providers: Record<string, never>;
    Search: {
      title?: string;
      description?: string;
      url?: string;
      externalurl?: string;
      mediaurl?: string;
      /** Format: int32 */
      mediaid?: number;
      /** Format: int32 */
      crc32?: number;
      lockedadmin?: boolean;
      lockedsuperadmin?: boolean;
    };
    SearchRequest: {
      value?: string;
    };
    Tick: {
      delete?: boolean;
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      idProblem?: number;
      comment?: string;
      date?: string;
      /** Format: double */
      stars?: number;
      grade?: string;
      repeats?: components["schemas"]["TickRepeat"][];
    };
    MediaInfo: {
      /** Format: int32 */
      mediaId?: number;
      description?: string;
      /** Format: int32 */
      pitch?: number;
      trivia?: boolean;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
};

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = {

  /** Get Media by id */
  getMedia: {
    parameters: {
      query: {
        "Media id": number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Media"];
        };
      };
    };
  };
  /** Update media location */
  putMedia: {
    parameters: {
      query: {
        "Move right": number;
        "Move left": boolean;
        "To sector id (will move media to sector if toSectorId>0 and toProblemId=0)": number;
        "To problem id (will move media to problem if toProblemId>0 and toSectorId=0)": number;
      };
    };
    responses: {
      /** @description default response */
      default: {
        content: {
          "*/*": unknown;
        };
      };
    };
  };
  /** Move media to trash */
  deleteMedia: {
    parameters: {
      query: {
        "Media id": number;
      };
    };
    responses: {
      /** @description default response */
      default: {
        content: {
          "*/*": unknown;
        };
      };
    };
  };
  /** Get activity feed */
  getActivity: {
    parameters: {
      query: {
        "Area id (can be 0 if idSector>0)": number;
        "Sector id (can be 0 if idArea>0)": number;
        "Filter on lower grade"?: number;
        "Include first ascents"?: boolean;
        "Include comments"?: boolean;
        "Include ticks (public ascents)"?: boolean;
        "Include new media"?: boolean;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Activity"][];
        };
      };
    };
  };
  /** Get administrators */
  getAdministrators: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Administrator"][];
        };
      };
    };
  };
  /** Get areas */
  getAreas: {
    parameters: {
      query?: {
        "Area id"?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Area"][];
        };
      };
    };
  };
  /** Update area (area must be provided as json on field "json" in multiPart) */
  postAreas: {
    requestBody?: {
      content: {
        "multipart/form-data; charset=utf-8": components["schemas"]["FormDataMultiPart"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Redirect"];
        };
      };
    };
  };
  /** Get area PDF by id */
  getAreasPdf: {
    parameters: {
      query: {
        "Area id": number;
      };
    };
    responses: {
      200: {
        content: {
          "application/pdf": string[];
        };
      };
    };
  };
  /** Get webcams */
  getCameras: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Webcam"][];
        };
      };
    };
  };
  /** Get boulders/routes marked as dangerous */
  getDangerous: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Dangerous"][];
        };
      };
    };
  };
  /** Get elevation by latitude and longitude */
  getElevation: {
    parameters: {
      query: {
        latitude: number;
        longitude: number;
      };
    };
    responses: {
      200: {
        content: {
          "text/html": number;
        };
      };
    };
  };
  /** Get frontpage */
  getFrontpage: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Frontpage"];
        };
      };
    };
  };
  /** Get grade distribution by Area Id or Sector Id */
  getGradeDistribution: {
    parameters: {
      query: {
        "Area id (can be 0 if idSector>0)": number;
        "Sector id (can be 0 if idArea>0)": number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GradeDistribution"][];
        };
      };
    };
  };
  /** Get graph (number of boulders/routes grouped by grade) */
  getGraph: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GradeDistribution"][];
        };
      };
    };
  };
  /** Get media by id */
  getImages: {
    parameters: {
      query: {
        "Media id": number;
        "Checksum - not used in ws, but necessary to include on client when an image is changed (e.g. rotated) to avoid cached version"?: number;
        "Image size - E.g. minDimention=100 can return an image with the size 100x133px"?: number;
      };
    };
    responses: {
      200: {
        content: {
          "image/*": string[];
        };
      };
    };
  };
  /** Get metadata */
  getMeta: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Meta"];
        };
      };
    };
  };
  /** Get permissions */
  getPermissions: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PermissionUser"][];
        };
      };
    };
  };
  /** Update user privilegies */
  postPermissions: {
    requestBody?: {
      content: {
        "*/*": components["schemas"]["PermissionUser"];
      };
    };
    responses: {
      /** @description default response */
      default: {
        content: {
          "*/*": unknown;
        };
      };
    };
  };
  /** Get problem by id */
  getProblem: {
    parameters: {
      query: {
        "Problem id": number;
        "Include hidden media (example: if a sector has multiple topo-images, the topo-images without this route will be hidden)"?: boolean;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Problem"];
        };
      };
    };
  };
  /** Get problem PDF by id */
  getProblemPdf: {
    parameters: {
      query: {
        "Access token"?: string;
        "Problem id": number;
      };
    };
    responses: {
      200: {
        content: {
          "application/pdf": string[];
        };
      };
    };
  };
  /** Get problems */
  getProblems: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ProblemArea"][];
        };
      };
    };
  };
  /** Update problem (problem must be provided as json on field "json" in multiPart) */
  postProblems: {
    requestBody?: {
      content: {
        "multipart/form-data; charset=utf-8": components["schemas"]["FormDataMultiPart"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Redirect"];
        };
      };
    };
  };
  /** Get problems as Excel (xlsx) */
  getProblemsXlsx: {
    responses: {
      200: {
        content: {
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": string[];
        };
      };
    };
  };
  /** Get profile by id */
  getProfile: {
    parameters: {
      query: {
        "User id (will return logged in user without this attribute)": number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Profile"];
        };
      };
    };
  };
  /** Get profile statistics by id */
  getProfileStatistics: {
    parameters: {
      query: {
        "User id": number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ProfileStatistics"];
        };
      };
    };
  };
  /** Get profile todo */
  getProfileTodo: {
    parameters: {
      query: {
        "User id": number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ProfileTodo"];
        };
      };
    };
  };
  /** Get profile media by id */
  getProfilemedia: {
    parameters: {
      query: {
        "User id": number;
        "FALSE = tagged media, TRUE = captured media"?: boolean;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ProfileMedia"][];
        };
      };
    };
  };
  /** Get robots.txt */
  getRobotsTxt: {
    responses: {
      200: {
        content: {
          "text/html": string;
        };
      };
    };
  };
  /** Get sector by id */
  getSectors: {
    parameters: {
      query: {
        "Sector id": number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Sector"];
        };
      };
    };
  };
  /** Update sector (sector smust be provided as json on field "json" in multiPart) */
  postSectors: {
    requestBody?: {
      content: {
        "multipart/form-data; charset=utf-8": components["schemas"]["FormDataMultiPart"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Redirect"];
        };
      };
    };
  };
  /** Get sector PDF by id */
  getSectorsPdf: {
    parameters: {
      query: {
        "Access token"?: string;
        "Sector id": number;
      };
    };
    responses: {
      200: {
        content: {
          "application/pdf": string[];
        };
      };
    };
  };
  /** Get sitemap.txt */
  getSitemapTxt: {
    parameters: {
      query?: {
        base?: string;
      };
    };
    responses: {
      200: {
        content: {
          "text/html": string;
        };
      };
    };
  };
  /** Get ticks (public ascents) */
  getTicks: {
    parameters: {
      query?: {
        "Page (ticks ordered descending, 0 returns fist page)"?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Ticks"];
        };
      };
    };
  };
  /** Update tick (public ascent) */
  postTicks: {
    requestBody?: {
      content: {
        "*/*": components["schemas"]["Tick"];
      };
    };
    responses: {
      /** @description default response */
      default: {
        content: {
          "*/*": unknown;
        };
      };
    };
  };
  /** Get todo on Area/Sector */
  getTodo: {
    parameters: {
      query: {
        "Area id (can be 0 if idSector>0)": number;
        "Sector id (can be 0 if idArea>0)": number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Todo"];
        };
      };
    };
  };
  /** Update todo */
  postTodo: {
    parameters: {
      query: {
        "Problem id": number;
      };
    };
    responses: {
      /** @description default response */
      default: {
        content: {
          "*/*": unknown;
        };
      };
    };
  };
  /** Get top on Area/Sector */
  getTop: {
    parameters: {
      query: {
        "Area id (can be 0 if idSector>0)": number;
        "Sector id (can be 0 if idArea>0)": number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Top"][];
        };
      };
    };
  };
  /** Get trash */
  getTrash: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Trash"][];
        };
      };
    };
  };
  /** Move Area/Sector/Problem/Media to trash (only one of the arguments must be different from 0) */
  putTrash: {
    parameters: {
      query: {
        "Area id": number;
        "Sector id": number;
        "Problem id": number;
        "Media id": number;
      };
    };
    responses: {
      /** @description default response */
      default: {
        content: {
          "*/*": unknown;
        };
      };
    };
  };
  /** Get problems requiring moderation */
  getUnmoderatedProblems: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ProblemArea"][];
        };
      };
    };
  };
  /** Search for user */
  getUsersSearch: {
    parameters: {
      query: {
        "Search keyword": string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserSearch"][];
        };
      };
    };
  };
  /** Get ticks (public ascents) on logged in user as Excel file (xlsx) */
  getUsersTicks: {
    responses: {
      200: {
        content: {
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": string[];
        };
      };
    };
  };
  /** Get Frontpage without JavaScript (for embedding on e.g. Facebook) */
  getWithoutJs: {
    responses: {
      200: {
        content: {
          "text/html": string;
        };
      };
    };
  };
  /** Get area by id without JavaScript (for embedding on e.g. Facebook) */
  getWithoutJsArea: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "text/html": string;
        };
      };
    };
  };
  /** Get problem by id without JavaScript (for embedding on e.g. Facebook) */
  getWithoutJsProblem: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "text/html": string;
        };
      };
    };
  };
  /** Get sector by id without JavaScript (for embedding on e.g. Facebook) */
  getWithoutJsSector: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "text/html": string;
        };
      };
    };
  };
  /** Update comment (comment must be provided as json on field "json" in multiPart) */
  postComments: {
    requestBody?: {
      content: {
        "multipart/form-data; charset=utf-8": components["schemas"]["FormDataMultiPart"];
      };
    };
    responses: {
      /** @description default response */
      default: {
        content: {
          "application/json; charset=utf-8": unknown;
        };
      };
    };
  };
  /** Update Media SVG */
  postMediaSvg: {
    requestBody?: {
      content: {
        "*/*": components["schemas"]["Media"];
      };
    };
    responses: {
      /** @description default response */
      default: {
        content: {
          "*/*": unknown;
        };
      };
    };
  };
  /** Add media on problem (problem must be provided as json on field "json" in multiPart) */
  postProblemsMedia: {
    parameters: {
      query: {
        "Problem id": number;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data; charset=utf-8": components["schemas"]["FormDataMultiPart"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Problem"];
        };
      };
    };
  };
  /** Update topo line on route/boulder (SVG on sector/problem-image) */
  postProblemsSvg: {
    parameters: {
      query: {
        "Problem id": number;
        "Media id": number;
      };
    };
    requestBody?: {
      content: {
        "*/*": components["schemas"]["Svg"];
      };
    };
    responses: {
      /** @description default response */
      default: {
        content: {
          "*/*": unknown;
        };
      };
    };
  };
  /** Search for area/sector/problem/user */
  postSearch: {
    requestBody?: {
      content: {
        "*/*": components["schemas"]["SearchRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Search"][];
        };
      };
    };
  };
  /** Update visible regions */
  postUserRegions: {
    parameters: {
      query: {
        "Region id": number;
        "Delete (TRUE=hide, FALSE=show)": boolean;
      };
    };
    responses: {
      /** @description default response */
      default: {
        content: {
          "*/*": unknown;
        };
      };
    };
  };
  /** Update media info */
  putMediaInfo: {
    requestBody?: {
      content: {
        "*/*": components["schemas"]["MediaInfo"];
      };
    };
    responses: {
      /** @description default response */
      default: {
        content: {
          "*/*": unknown;
        };
      };
    };
  };
  /** Update media rotation (allowed for administrators + user who uploaded specific image) */
  putMediaJpegRotate: {
    parameters: {
      query: {
        "Media id": number;
        "Degrees (90/180/270)": number;
      };
    };
    responses: {
      /** @description default response */
      default: {
        content: {
          "*/*": unknown;
        };
      };
    };
  };
};
